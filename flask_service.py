import tensorflow as tf
import argparse 
import numpy as np
import scipy.misc
from io import BytesIO
from flask import Flask, send_file
import base64

app = Flask(__name__)

def load_graph(frozen_graph_filename):
    # We load the protobuf file from the disk and parse it to retrieve the 
    # unserialized graph_def
    with tf.gfile.GFile(frozen_graph_filename, "rb") as f:
        graph_def = tf.GraphDef()
        graph_def.ParseFromString(f.read())

    # Then, we import the graph_def into a new Graph and returns it 
    with tf.Graph().as_default() as graph:
        # The name var will prefix every op/nodes in your graph
        # Since we load everything in a new graph, this is not needed
        tf.import_graph_def(graph_def, name="hulkTestGraph")
    return graph


def get_info():
    frozen_model = "frozen_model.pb"

    graph = load_graph(frozen_model)

    x = graph.get_tensor_by_name('hulkTestGraph/z:0')
    y = graph.get_tensor_by_name('hulkTestGraph/G_decoder/sub:0')

    # We launch a Session
    sess = tf.Session(graph=graph)
    return sess, x, y

@app.route('/api/generate', methods=['GET'])
def generate():
    z = np.random.uniform(-1, 1, 32 * 16)  #16개 뽑아보자
    z = np.reshape(z, [-1, 32])
    y_out = session.run(y, feed_dict={x: z})
    img_strs = []
    for i in range(9):
        bIO = BytesIO()
        scipy.misc.imsave(bIO, y_out[i,:], "JPEG")
        bIO.seek(0)
        encoded_string = base64.b64encode(bIO.read()).decode("UTF-8")
        img_strs.append(encoded_string)

    img_tag = ""
    for i, img_str in enumerate(img_strs):
        img_tag += '&nbsp;&nbsp;&nbsp;&nbsp;<img src="data:image/jpeg;base64, {}" alt="Red dot" />'.format(img_str)
        if i % 3 == 2:
            img_tag += "<br><br>"

    html = """
    <div>
        <p>Generated By HULK</p>
        {}
    </div>
    """.format(img_tag)
    return html
    '''
    return send_file(bIO,
                     attachment_filename="test.jpg",
                     as_attachment=True)
    '''


if __name__ == '__main__':
    session, x, y = get_info()
    app.run(host='0.0.0.0', port=int("1037"))


